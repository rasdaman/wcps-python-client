wcps.model
==========

.. py:module:: wcps.model

.. autoapi-nested-parse::

   This module defines classes and methods for dynamically building WCPS query expressions.

   This can be done by:

   1. Composing objects of :class:`WCPSExpr` subclasses, e.g. `Sum(Datacube("cube"))`
   2. Chaining methods on :class:`WCPSExpr` objects, e.g. `Datacube("cube").sum()`

   Each subclass defines the ``__str__`` method, so that executing
   ``str(Sum(Datacube("cube")))`` returns a valid WCPS query string
   that can be sent to a WCPS server.



Attributes
----------

.. autoapisummary::

   wcps.model.BoundType
   wcps.model.ScalarType
   wcps.model.OperandType
   wcps.model.AxisTuple


Exceptions
----------

.. autoapisummary::

   wcps.model.WCPSClientException


Classes
-------

.. autoapisummary::

   wcps.model.StrEnum
   wcps.model.WCPSExpr
   wcps.model.Datacube
   wcps.model.Scalar
   wcps.model.UnaryOp
   wcps.model.BinaryOp
   wcps.model.UnaryFunc
   wcps.model.BinaryFunc
   wcps.model.Add
   wcps.model.Sub
   wcps.model.Mul
   wcps.model.Div
   wcps.model.Mod
   wcps.model.Abs
   wcps.model.Round
   wcps.model.Floor
   wcps.model.Ceil
   wcps.model.Exp
   wcps.model.Log
   wcps.model.Ln
   wcps.model.Sqrt
   wcps.model.Pow
   wcps.model.Sin
   wcps.model.Cos
   wcps.model.Tan
   wcps.model.Sinh
   wcps.model.Cosh
   wcps.model.Tanh
   wcps.model.ArcSin
   wcps.model.ArcCos
   wcps.model.ArcTan
   wcps.model.ArcTan2
   wcps.model.Gt
   wcps.model.Lt
   wcps.model.Ge
   wcps.model.Le
   wcps.model.Eq
   wcps.model.Ne
   wcps.model.And
   wcps.model.Or
   wcps.model.Xor
   wcps.model.Not
   wcps.model.Overlay
   wcps.model.Bit
   wcps.model.Band
   wcps.model.MultiBand
   wcps.model.Axis
   wcps.model.Subset
   wcps.model.Extend
   wcps.model.Scale
   wcps.model.ResampleAlg
   wcps.model.Reproject
   wcps.model.CastType
   wcps.model.Cast
   wcps.model.Sum
   wcps.model.Count
   wcps.model.Avg
   wcps.model.Min
   wcps.model.Max
   wcps.model.All
   wcps.model.Some
   wcps.model.AxisIter
   wcps.model.AxisIterRef
   wcps.model.CondenseOp
   wcps.model.Condense
   wcps.model.Coverage
   wcps.model.Switch
   wcps.model.Clip
   wcps.model.Udf
   wcps.model.Encode


Functions
---------

.. autoapisummary::

   wcps.model.rgb
   wcps.model.rgba


Module Contents
---------------

.. py:class:: StrEnum

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Custom implementation of StrEnum for Python <= 3.10

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: WCPSExpr(operands = None)

   An abstract class encapsulating a WCPS expression.

   It contains a list of :attr:`operands` (themselves :class:`WCPSExpr`) and a :attr:`parent`.

   Subclasses for each operator exist, e.g. :class:`Add` for binary addition,
   which are applied to the :attr:`operands`. For most
   operators there are also corresponding methods in this class, allowing to build
   an expression by chaining them, e.g
   ``Sum(Datacube("cube1") + Datacube("cube2"))``
   is the same as
   ``Datacube("cube1").add(Datacube("cube2").sum())``. Notable exceptions are :class:`Switch` and
   :class:`Coverage`.

   Various builtin operators are overloaded to allow writing expressions more naturally,
   e.g. ``WCPSExpr * WCPSExpr``. Number/strings are automatically wrapped in a :class:`Scalar`,
   e.g. ``WCPSExpr * 2`` becomes ``WCPSExpr * Scalar(2)``.

   ``__and__``, ``__or__``, ``__xor__``, ``__invert__`` correspond to BITWISE operators,
   not to the logical and, or, and not. They are not overloaded to the logical
   and/or/xor/not in order to avoid confusion.

   :param operands: the operands of this WCPS expression. This object is set
       as the parent of each operand, while its own parent is set to None.
       Scalar operands such as 1, 4.9 or "test" are automatically wrapped in a :class:`Scalar` object.


   .. py:attribute:: parent
      :type:  Optional[WCPSExpr]
      :value: None


      A :class:`WCPSExpr` of which this expression is an operand; ``None`` if this is the root expression.
      E.g. in if this expression is the :class:`Datacube` object in ``Datacube("test") * 5``,
      then the ``parent`` is the :class:`Mul` object.



   .. py:attribute:: operands
      :type:  list[WCPSExpr]
      :value: []


      A list of :class:`WCPSExpr` operands of this expressions. E.g. in ``Datacube("test") * 5``, this
      expression is a :class:`Mul`, with :class:`Datacube` and :class:`Scalar` operands.



   .. py:method:: get_datacube_operands()

      :return: all unique :class:`Datacube` objects contained within the expression tree
          starting from this :class:`WCPSExpr`, sorted alphabetically by datacube name.



   .. py:method:: add_operand(op)

      Add an operand to the list of operands. Scalar ``op`` such as 1, 4.9 or
      "test" are automatically wrapped in a :class:`Scalar` object.
      :param op: an operand to be added to the list of this expression's operands;
      if ``op`` is ``None`` it will be ignored.



   .. py:method:: add(other)

      Adds the current operand to another operand.

      :param other: The operand to add to the current operand.
      :return: An instance of the :class:`Add` class representing the addition operation.

      Examples:

      - ``Datacube("test1").add(Datacube("test2"))``
      - ``Datacube("test1").add(5)``



   .. py:method:: sub(other)

      Subtracts another operand from the current operand.

      :param other: The operand to subtract from the current operand.
      :return: An instance of the :class:`Sub` class representing the subtraction operation.

      Examples:

      - ``Datacube("test1").sub(Datacube("test2"))``
      - ``Datacube("test1").sub(5)``



   .. py:method:: mul(other)

      Multiplies the current operand by another operand.

      :param other: The operand to multiply with the current operand.
      :return: An instance of the :class:`Mul` class representing the multiplication operation.

      Examples:

      - ``Datacube("test1").mul(Datacube("test2"))``
      - ``Datacube("test1").mul(5)``



   .. py:method:: div(other)

      Divides the current operand by another operand.

      :param other: The operand to divide the current operand by.
      :return: An instance of the :class:`Div` class representing the division operation.

      Examples:

      - ``Datacube("test1").div(Datacube("test2"))``
      - ``Datacube("test1").div(5)``



   .. py:method:: mod(other)

      Computes the modulus (remainder of the division) of the current operand by another operand.

      :param other: The operand to use as the divisor.
      :return: An instance of the :class:`Mod` class representing the modulus operation.

      Examples:

      - ``Datacube("test1").mod(Datacube("test2"))``
      - ``Datacube("test1").mod(5)``



   .. py:method:: abs()

      Computes the absolute value of the current operand.

      :return: An instance of the :class:`Abs` class representing the absolute value operation.

      Examples:

      - ``Datacube("test1").abs()``



   .. py:method:: round()

      Rounds the current operand to the nearest integer.

      :return: An instance of the :class:`Round` class representing the rounding operation.

      Examples:

      - ``Datacube("test1").round()``



   .. py:method:: floor()

      Computes the floor of the current operand (rounds down to the nearest integer).

      :return: An instance of the :class:`Floor` class representing the floor operation.

      Examples:

      - ``Datacube("test1").floor()``



   .. py:method:: ceil()

      Computes the ceiling of the current operand (rounds up to the nearest integer).

      :return: An instance of the :class:`Ceil` class representing the ceiling operation.

      Examples:

      - ``Datacube("test1").ceil()``



   .. py:method:: exp()

      Computes the exponential (e^x) of the current operand.

      :return: An instance of the :class:`Exp` class representing the exponential operation.

      Examples:

      - ``Datacube("test1").exp()``



   .. py:method:: log()

      Computes the logarithm (base 10) of the current operand.

      :return: An instance of the :class:`Log` class representing the logarithm operation.

      Examples:

      - ``Datacube("test1").log()``



   .. py:method:: ln()

      Computes the natural logarithm (base e) of the current operand.

      :return: An instance of the :class:`Ln` class representing the natural logarithm operation.

      Examples:

      - ``Datacube("test1").ln()``



   .. py:method:: sqrt()

      Computes the square root of the current operand.

      :return: An instance of the :class:`Sqrt` class representing the square root operation.

      Examples:

      - ``Datacube("test1").sqrt()``



   .. py:method:: pow(other)

      Raises the current operand to the power of another operand.

      :param other: The exponent to raise the current operand to.
      :return: An instance of the :class:`Pow` class representing the power operation.

      Examples:

      - ``Datacube("test1").pow(Datacube("test2"))``
      - ``Datacube("test1").pow(5)``



   .. py:method:: sin()

      Computes the sine of the current operand.

      :return: An instance of the :class:`Sin` class representing the sine operation.

      Examples:

      - ``Datacube("test1").sin()``



   .. py:method:: cos()

      Computes the cosine of the current operand.

      :return: An instance of the :class:`Cos` class representing the cosine operation.

      Examples:

      - ``Datacube("test1").cos()``



   .. py:method:: tan()

      Computes the tangent of the current operand.

      :return: An instance of the :class:`Tan` class representing the tangent operation.

      Examples:

      - ``Datacube("test1").tan()``



   .. py:method:: sinh()

      Computes the hyperbolic sine of the current operand.

      :return: An instance of the :class:`Sinh` class representing the hyperbolic sine operation.

      Examples:

      - ``Datacube("test1").sinh()``



   .. py:method:: cosh()

      Computes the hyperbolic cosine of the current operand.

      :return: An instance of the :class:`Cosh` class representing the hyperbolic cosine operation.

      Examples:

      - ``Datacube("test1").cosh()``



   .. py:method:: tanh()

      Computes the hyperbolic tangent of the current operand.

      :return: An instance of the :class:`Tanh` class representing the hyperbolic tangent operation.

      Examples:

      - ``Datacube("test1").tanh()``



   .. py:method:: arcsin()

      Computes the inverse sine (arcsine) of the current operand.

      :return: An instance of the :class:`ArcSin` class representing the arcsine operation.

      Examples:

      - ``Datacube("test1").arcsin()``



   .. py:method:: arccos()

      Computes the inverse cosine (arccosine) of the current operand.

      :return: An instance of the :class:`ArcCos` class representing the arccosine operation.

      Examples:

      - ``Datacube("test1").arccos()``



   .. py:method:: arctan()

      Computes the inverse tangent (arctangent) of the current operand.

      :return: An instance of the :class:`ArcTan` class representing the arctangent operation.

      Examples:

      - ``Datacube("test1").arctan()``



   .. py:method:: arctan2()

      Computes the two-argument inverse tangent (arctangent2) of the current operand.

      :return: An instance of the :class:`ArcTan2` class representing the arctangent2 operation.

      Examples:

      - ``Datacube("test1").arctan2(Datacube("test2"))``



   .. py:method:: gt(other)

      Checks if the current operand is greater than another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Gt` class representing the greater-than comparison.

      Examples:

      - ``Datacube("test1").gt(Datacube("test2"))``
      - ``Datacube("test1").gt(10)``



   .. py:method:: lt(other)

      Checks if the current operand is less than another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Lt` class representing the less-than comparison.

      Examples:

      - ``Datacube("test1").lt(Datacube("test2"))``
      - ``Datacube("test1").lt(10)``



   .. py:method:: ge(other)

      Checks if the current operand is greater than or equal to another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Ge` class representing the greater-than-or-equal-to comparison.

      Examples:

      - ``Datacube("test1").ge(Datacube("test2"))``
      - ``Datacube("test1").ge(10)``



   .. py:method:: le(other)

      Checks if the current operand is less than or equal to another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Le` class representing the less-than-or-equal-to comparison.

      Examples:

      - ``Datacube("test1").le(Datacube("test2"))``
      - ``Datacube("test1").le(10)``



   .. py:method:: eq(other)

      Checks if the current operand is equal to another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Eq` class representing the equality comparison.

      Examples:

      - ``Datacube("test1").eq(Datacube("test2"))``
      - ``Datacube("test1").eq(10)``



   .. py:method:: ne(other)

      Checks if the current operand is not equal to another operand.

      :param other: The operand to compare against.
      :return: An instance of the :class:`Ne` class representing the inequality comparison.

      Examples:

      - ``Datacube("test1").ne(Datacube("test2"))``
      - ``Datacube("test1").ne(10)``



   .. py:method:: logical_and(other)

      Performs a logical AND operation between the current operand and another operand.

      :param other: The operand to perform the AND operation with.
      :return: An instance of the :class:`And` class representing the logical AND operation.

      Examples:

      - ``Datacube("test1").logical_and(Datacube("test2"))``
      - ``Datacube("test1").logical_and(True)``



   .. py:method:: logical_or(other)

      Performs a logical OR operation between the current operand and another operand.

      :param other: The operand to perform the OR operation with.
      :return: An instance of the :class:`Or` class representing the logical OR operation.

      Examples:

      - ``Datacube("test1").logical_or(Datacube("test2"))``
      - ``Datacube("test1").logical_or(False)``



   .. py:method:: logical_xor(other)

      Performs a logical XOR operation between the current operand and another operand.

      :param other: The operand to perform the XOR operation with.
      :return: An instance of the :class:`Xor` class representing the logical XOR operation.

      Examples:

      - ``Datacube("test1").logical_xor(Datacube("test2"))``
      - ``Datacube("test1").logical_xor(True)``



   .. py:method:: logical_not()

      Performs a logical NOT operation on the current operand.

      :return: An instance of the :class:`Not` class representing the logical NOT operation.

      Examples:

      - ``Datacube("test1").logical_not()``



   .. py:method:: overlay(other)

      Performs an overlay operation, placing other operand "on top" of this operand:

      - wherever the second operand’s cell value is not zero and not null, the result value will be this value.
      - wherever the second operand’s cell value is zero or null, the first argument’s cell value will be taken.

      :param other: The operand to perform the overlay operation with.
      :return: An instance of the :class:`Overlay` class representing the overlay operation.

      Examples:

      - ``Datacube("test1").overlay(Datacube("test2"))``



   .. py:method:: bit(pos)

      Take the bit in this operand's cell values at nonnegative position number pos,
      and put it as a Boolean value into a byte. Position counting starts with 0 and
      runs from least to most significant bit.

      :param pos: The position at which the bit value should be extracted
      :return: An instance of the :class:`Bit` class

      Examples:

      - ``Datacube("test1").bit(5)``



   .. py:method:: band(band_name)

      Extract the given band ``band_name`` from this multiband object.

      :param band_name: The band name or position (0-based index)
      :return: An instance of the :class:`Band` class

      Examples:

      - ``Datacube("rgb").band("red")``
      - ``Datacube("rgb").band(0)``



   .. py:method:: subset(axes)

      Extract a spatio-temporal subset from this object as specified by the list of ``axes``.

      :param axes: specifies a spatio-temporal subset as:

      1. a single :class:`Axis` object: ``Axis(axis_name, low, high?, crs?)``
      2. a tuple of multiple :class:`Axis` objects: ``(Axis(...), Axis(...))``
      3. a tuple specifying the axis subset in place: ``(axis_name, low, high?, crs?)``
      4. a tuple of axis subset tuples (see 3.): ``((axis_name, low, high?, crs?), (...), ...)``
      5. a list of :class:`Axis` objects: `[Axis(...), Axis(...), ...]`
      6. a list of axis subset tuples (see 3.): ``[(axis_name, low, high?, crs?), (...), ...]``

      :return: An instance of the :class:`Subset` class

      Examples (with ``cov = Datacube("testcube")``):

      1. ``cov.subset(Axis("X", 5.5, 10.5))``
      2. ``cov.subset(Axis("X", 5.5, 10.5), Axis("Y", 15))``
      3. ``cov.subset("X", 5.5, 10.5)``
      4. ``cov.subset(("X", 5.5, 10.5), ("Y", 15))``
      5. ``cov.subset([Axis("X", 5.5, 10.5), Axis("Y", 15)])``
      6. ``cov.subset([("X", 5.5, 10.5), ("Y", 15)])``



   .. py:method:: extend(axes)

      Extend this object to a new domain as specified by the list of ``axes``; new areas
      are filled in with null values.

      :param axes: specifies a spatio-temporal subset as:

      1. a single :class:`Axis` object: ``Axis(axis_name, low, high?, crs?)``
      2. a tuple of multiple :class:`Axis` objects: ``(Axis(...), Axis(...))``
      3. a tuple specifying the axis subset in place: ``(axis_name, low, high?, crs?)``
      4. a tuple of axis subset tuples (see 3.): ``((axis_name, low, high?, crs?), (...), ...)``
      5. a list of :class:`Axis` objects: `[Axis(...), Axis(...), ...]`
      6. a list of axis subset tuples (see 3.): ``[(axis_name, low, high?, crs?), (...), ...]``

      :return: An instance of the :class:`Subset` class

      Examples (with ``cov = Datacube("testcube")``):

      1. ``cov.extend(Axis("X", 5.5, 10.5))``
      2. ``cov.extend(Axis("X", 5.5, 10.5), Axis("Y", 15))``
      3. ``cov.extend("X", 5.5, 10.5)``
      4. ``cov.extend(("X", 5.5, 10.5), ("Y", 15))``
      5. ``cov.extend([Axis("X", 5.5, 10.5), Axis("Y", 15)])``
      6. ``cov.extend([("X", 5.5, 10.5), ("Y", 15)])``



   .. py:method:: scale(grid_axes=None, another_coverage=None, single_factor=None, axis_factors=None)

      Up or down-scale the current object. Exactly one of the parameters must be specified.

      :param grid_axes: rescale to the grid bounds specified for each axis
      :param another_coverage: rescale to the domain of another coverage operand
      :param single_factor: rescale all axes by the same scale factor;
          factor > 1 for scaling up, 0 < factor < 1 for scaling down
      :param axis_factors: rescale each axis by a specific factor;
          factor > 1 for scaling up, 0 < factor < 1 for scaling down

      :return: An instance of the :class:`Scale` class

      :raise: A :class:`WCPSClientException` in case of error in the provided arguments.

      Examples (with ``cov = Datacube("testcube")``):

      1. ``cov.scale(("X", 0, 100), ("Y", 0, 200))``
      2. ``cov.scale(Datacube("cov2"))``
      3. ``cov.scale(0.5)`` - downscale by 2x
      4. ``cov.scale([0.5, 2])`` - downscale the first axis by 2x, and upscale the second axis by 2x



   .. py:method:: reproject(target_crs, interpolation_method = None, axis_resolutions=None, axis_subsets=None, domain_of_coverage=None)

      Reproject the current object to a new CRS.

      :param target_crs: the new CRS, e.g. "EPSG:4326"
      :param interpolation_method: an optional interpolation method, one of the constants
          defined by :class:`ResampleAlg`, e.g. :const:`ResampleAlg.BILINEAR`
      :param axis_resolutions: optional list of target axis resolutions to
          maintain in the reprojected result
      :param axis_subsets: crop the result by the specified axis subsets (same syntax as for ``subset(axes)``)
      :param domain_of_coverage: crop the result to the geo domain of another coverage object

      Examples (with ``cov = Datacube("testcube")``):

      1. ``cov.reproject("EPSG:4326")``
      2. ``cov.reproject("EPSG:4326", interpolation_method=ResampleAlg.CUBIC)``
      3. ``cov.reproject("EPSG:4326", axis_resolutions=[0.5, 1.5])``
      4. ``cov.reproject("EPSG:4326", axis_subsets=[("Lat", 30.5, 60.5), ("Lon", 50.5, 70.5)])``
      5. ``cov.reproject("EPSG:4326", axis_resolutions=[0.5, 1.5], domain_of_coverage=Datacube("cov2"))``



   .. py:method:: cast(target_type)

      Cast the cell values of the current operand to a new ``target_type``.

      :param target_type: the new cell type of the result,
          one of the constants in :class:`CastType`, e.g. :const:`CastType.CHAR`.

      Examples:

      - ``cov.cast(Datacube("testcube"), CastType.FLOAT)``



   .. py:method:: sum()

      Computes the sum of the cell values of the current operand.

      :return: An instance of the :class:`Sum` class representing the sum operation.

      Examples:

      - ``Datacube("test1").sum()``



   .. py:method:: count()

      Counts the number of *true* values in the current boolean coverage operand.

      :return: An instance of the :class:`Count` class representing the count operation.

      Examples:

      - ``Datacube("test1").count()``



   .. py:method:: avg()

      Computes the average (mean) of the cell values of the current operand.

      :return: An instance of the :class:`Avg` class representing the average operation.

      Examples:

      - ``Datacube("test1").avg()``



   .. py:method:: min()

      Finds the minimum value among the elements of the current operand.

      :return: An instance of the :class:`Min` class representing the minimum operation.

      Examples:

      - ``Datacube("test1").min()``



   .. py:method:: max()

      Finds the maximum value among the elements of the current operand.

      :return: An instance of the :class:`Max` class representing the maximum operation.

      Examples:

      - ``Datacube("test1").max()``



   .. py:method:: all()

      Checks if all elements in the current operand are true.

      :return: An instance of the :class:`All` class.

      Examples:

      - ``Datacube("test1").all()``



   .. py:method:: some()

      Checks if some elements in the current operand are true.

      :return: An instance of the :class:`Some` class.

      Examples:

      - ``Datacube("test1").some()``



   .. py:method:: encode(data_format = None, format_params = None)

      Encode a coverage to some ``data_format``. The data format must be specified
      with the ``to(format)`` method if it isn't provided here.
      Optionally format parameters can be specified to customize the encoding process.

      :param data_format: the data format, e.g. ``"GTiff"``
      :param format_params: additional format parameters the influence the encoding

      Examples:

      ```
      Datacube("testcube").encode("GTiff").params("...")
      ```



.. py:data:: BoundType

   A type representing axis bounds (in subsetting, extend, scale, etc).


.. py:data:: ScalarType

   Scalar values can be of one of these types.


.. py:data:: OperandType

   Type of operands of WCPS expressions.


.. py:data:: AxisTuple

   Axis tuple types: (name, low), (name, low, high), or (name, low, high, crs)


.. py:class:: Datacube(name)

   Bases: :py:obj:`WCPSExpr`


   A reference to a datacube (coverage) object on a WCPS server.

   Example: ``Datacube("mycoverage")``.

   :param name: the datacube (coverage) name.


   .. py:attribute:: name


.. py:class:: Scalar(op)

   Bases: :py:obj:`WCPSExpr`


   A wrapper for scalar values, e.g. ``5``, ``3.14``, ``"PNG"``.


   .. py:attribute:: op


.. py:class:: UnaryOp(op, operator)

   Bases: :py:obj:`WCPSExpr`


   A base class for unary operators, e.g. logical NOT.


   .. py:attribute:: operator


.. py:class:: BinaryOp(op1, op2, operator)

   Bases: :py:obj:`WCPSExpr`


   A base class for binary operators, e.g. logical AND.


   .. py:attribute:: operator


.. py:class:: UnaryFunc(op, func)

   Bases: :py:obj:`WCPSExpr`


   A base class for unary functions, e.g. :class:`Abs`.


   .. py:attribute:: func


.. py:class:: BinaryFunc(op1, op2, func)

   Bases: :py:obj:`WCPSExpr`


   A base class for binary functions, e.g. :class:`Pow`.


   .. py:attribute:: func


.. py:class:: Add(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Adds ``op1`` to ``op2``.

   Examples:

   - ``Add(Datacube("test1"), Datacube("test2"))``
   - ``Add(Datacube("test1"), 5)``
   - ``Add(5, Datacube("test1"))``


.. py:class:: Sub(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Subtracts ``op2`` from ``op1``.

   Examples:

   - ``Sub(Datacube("test1"), Datacube("test2"))``
   - ``Sub(Datacube("test1"), 5)``
   - ``Sub(5, Datacube("test1"))``


.. py:class:: Mul(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Multiplies ``op1`` by ``op2``.

   Examples:

   - ``Mul(Datacube("test1"), Datacube("test2"))``
   - ``Mul(Datacube("test1"), 5)``
   - ``Mul(5, Datacube("test1"))``


.. py:class:: Div(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Divides ``op1`` by ``op2``.

   Examples:

   - ``Div(Datacube("test1"), Datacube("test2"))``
   - ``Div(Datacube("test1"), 5)``
   - ``Div(5, Datacube("test1"))``


.. py:class:: Mod(op1, op2)

   Bases: :py:obj:`BinaryFunc`


   Computes the modulus (remainder of the division) of ``op1`` by ``op2``.

   Examples:

   - ``Mod(Datacube("test1"), Datacube("test2"))``
   - ``Mod(Datacube("test1"), 5)``
   - ``Mod(5, Datacube("test1"))``


.. py:class:: Abs(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the absolute value of ``op``.

   Examples:

   - ``Abs(Datacube("test1"))``
   - ``Abs(-5)``


.. py:class:: Round(op)

   Bases: :py:obj:`UnaryFunc`


   Rounds ``op`` to the nearest integer.

   Examples:

   - ``Round(Datacube("test1"))``
   - ``Round(-5.4)``


.. py:class:: Floor(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the floor of ``op`` (rounds down to the nearest integer).

   Examples:

   - ``Floor(Datacube("test1"))``
   - ``Floor(-5.4)``


.. py:class:: Ceil(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the ceiling of ``op`` (rounds up to the nearest integer).

   Examples:

   - ``Ceil(Datacube("test1"))``
   - ``Ceil(-5.4)``


.. py:class:: Exp(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the exponential (e^x) of ``op``.

   Examples:

   - ``Exp(Datacube("test1"))``


.. py:class:: Log(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the logarithm (base 10) of ``op``.

   Examples:

   - ``Log(Datacube("test1"))``


.. py:class:: Ln(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the natural logarithm (base e) of ``op``.

   Examples:

   - ``Ln(Datacube("test1"))``


.. py:class:: Sqrt(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the square root of ``op``.

   Examples:

   - ``Sqrt(Datacube("test1"))``


.. py:class:: Pow(op1, op2)

   Bases: :py:obj:`BinaryFunc`


   Raises ``op1`` to the power of ``op2``.

   Examples:

   - ``Pow(Datacube("test1"), Datacube("test2"))``
   - ``Pow(Datacube("test1"), 5)``


.. py:class:: Sin(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the sine of ``op``.

   Examples:

   - ``Sin(Datacube("test1"))``


.. py:class:: Cos(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the cosine of ``op``.

   Examples:

   - ``Cos(Datacube("test1"))``


.. py:class:: Tan(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the tangent of ``op``.

   Examples:

   - ``Tan(Datacube("test1"))``


.. py:class:: Sinh(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the hyperbolic sine of ``op``.

   Examples:

   - ``Sinh(Datacube("test1"))``


.. py:class:: Cosh(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the hyperbolic cosine of ``op``.

   Examples:

   - ``Cosh(Datacube("test1"))``


.. py:class:: Tanh(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the hyperbolic tangent of ``op``.

   Examples:

   - ``Tanh(Datacube("test1"))``


.. py:class:: ArcSin(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the inverse sine of ``op``.

   Examples:

   - ``ArcSin(Datacube("test1"))``


.. py:class:: ArcCos(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the inverse cosine of ``op``.

   Examples:

   - ``ArcCos(Datacube("test1"))``


.. py:class:: ArcTan(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the inverse tangent of ``op``.

   Examples:

   - ``ArcTan(Datacube("test1"))``


.. py:class:: ArcTan2(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the two-argument inverse tangent of ``op``.

   Examples:

   - ``ArcTan2(Datacube("test1"))``


.. py:class:: Gt(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is greater than ``op2``.

   Examples:

   - ``Gt(Datacube("test1"), Datacube("test2"))``
   - ``Gt(Datacube("test1"), 10)``


.. py:class:: Lt(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is less than ``op2``.

   Examples:

   - ``Lt(Datacube("test1"), Datacube("test2"))``
   - ``Lt(Datacube("test1"), 10)``


.. py:class:: Ge(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is greater than or equal to ``op2``.

   Examples:

   - ``Ge(Datacube("test1"), Datacube("test2"))``
   - ``Ge(Datacube("test1"), 10)``


.. py:class:: Le(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is less than or equal to ``op2``.

   Examples:

   - ``Le(Datacube("test1"), Datacube("test2"))``
   - ``Le(Datacube("test1"), 10)``


.. py:class:: Eq(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is equal to ``op2``.

   Examples:

   - ``Eq(Datacube("test1"), Datacube("test2"))``
   - ``Eq(Datacube("test1"), 10)``


.. py:class:: Ne(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Checks if ``op1`` is not equal to ``op2``.

   Examples:

   - ``Ne(Datacube("test1"), Datacube("test2"))``
   - ``Ne(Datacube("test1"), 10)``


.. py:class:: And(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Performs a logical AND operation between ``op1`` and ``op2``.

   Examples:

   - ``And(Datacube("test1"), Datacube("test2"))``
   - ``And(Datacube("test1"), True)``


.. py:class:: Or(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Performs a logical OR operation between ``op1`` and ``op2``.

   Examples:

   - ``Or(Datacube("test1"), Datacube("test2"))``
   - ``Or(Datacube("test1"), False)``


.. py:class:: Xor(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Performs a logical XOR operation between ``op1`` and ``op2``.

   Examples:

   - ``Xor(Datacube("test1"), Datacube("test2"))``
   - ``Xor(Datacube("test1"), True)``


.. py:class:: Not(op)

   Bases: :py:obj:`UnaryOp`


   Performs a logical Not operation on ``op``.

   Examples:

   - ``Not(Datacube("test1"))``
   - ``Not(True)``


.. py:class:: Overlay(op1, op2)

   Bases: :py:obj:`BinaryOp`


   Performs an overlay operation, placing ``op2`` "on top" of ``op1``:

   - wherever the cell value of ``op2`` is not zero and not null, the result value will be this value.
   - wherever the cell value of ``op2`` is zero or null, the cell value of ``op1`` will be taken.

   Examples:

   - ``Overlay(Datacube("test1"), Datacube("test2"))``


.. py:class:: Bit(op, pos)

   Bases: :py:obj:`BinaryFunc`


   Take the bit in the cell values of ``op`` at nonnegative position number ``pos``,
   and put it as a Boolean value into a byte. Position counting starts with 0 and
   runs from least to most significant bit.

   :param pos: The position at which the bit value should be extracted

   Examples:

   - ``Bit(Datacube("test1", 5)``


.. py:class:: Band(op, field)

   Bases: :py:obj:`WCPSExpr`


   Select a field (band, channel) from a multiband operand.


   .. py:attribute:: field


.. py:class:: MultiBand(bands)

   Bases: :py:obj:`WCPSExpr`


   Create a multiband value.
   :param bands: a dictionary of (band name, value), e.g. {"red": cov1, "blue": 2}


   .. py:attribute:: bands


.. py:function:: rgb(r, g, b)

   Utility method for conveniently specifying RGB (red, green, blue) multiband values.
   Examples:

   - ``rgb(255,255,255)``
   - ``rgb(red_cov, blue_cov, 0)``

   :param r: red band
   :param g: green band
   :param b: blue band
   :return: a MultiBand object with red, green and blue bands correspondingly.


.. py:function:: rgba(r, g, b, a)

   Utility method for conveniently specifying RGBA (red, green, blue, alpha) multiband values.
   Examples:

   - ``rgb(255,255,255,255)``
   - ``rgb(red_cov, blue_cov, 0, 255)``

   :param r: red band
   :param g: green band
   :param b: blue band
   :param a: alpha band
   :return: a MultiBand object with red, green, blue and alpha bands correspondingly.


.. py:class:: Axis(axis_name, low, high = None, crs = None)

   Bases: :py:obj:`WCPSExpr`


   Represents an axis interval for defining spatial, temporal, or other dimensional subsets
   in WCPS queries. An axis subset specifies a trim (or slice) along a specific axis,
   optionally with a Coordinate Reference System (CRS) if the low/high are not in the
   native CRS.

   This object can be used in operations like subsetting, extending, or scaling
   coverages. It supports both single values (slicing) and ranges (trimming).

   :param axis_name: The name of the axis (e.g., "X", "Y", "time").
   :param low: The lower bound of a subset trim, or a slice value if ``high`` is not given.
   :param high: The upper bound of a subset trim.
   :param crs: The CRS associated with the axis (e.g., "EPSG:4326"), usually set if
       the low/high values are not in the native CRS.

   Constants:
       MIN ('*'): Can be used for the minimum bound of an axis.
       MAX ('*'): Can be used for the maximum bound of an axis.

   Examples:

   .. code:: python

       # Define a spatial axis subset from 15.0 to 20.0 with CRS "EPSG:4326"
       axis = Axis("X", 15.0, 20.0, "EPSG:4326")

       # Define slicing on the temporal axis time
       axis = Axis("time", "2025-01-01")

   :raises WCPSClientException: If the axis name is empty.


   .. py:attribute:: MIN
      :value: '*'



   .. py:attribute:: MAX
      :value: '*'



   .. py:attribute:: axis_name


   .. py:attribute:: low


   .. py:attribute:: high
      :value: None



   .. py:attribute:: crs
      :value: None



   .. py:method:: get_axis_list(axes)
      :staticmethod:


      Normalizes ``axes`` into a list of Axis objects.
      :param axes: may be:

          - a single Axis, e.g. ``Axis("X", 0, 100.5, "EPSG:4326")``
          - a single slice, e.g. ``"X":1``, or ``"X":1:15.3``
          - a tuple of Axis objects, e.g. ``(Axis(...), Axis(...), ...)``
          - a single in-place axis tuple, e.g. ``("X", 0, 100.5, "EPSG:4326")``
          - a tuple of axis tuples, e.g. ``(("X", 0, 100.5), (...), ...)``
          - a tuple of slices, e.g. ``("X":1, "Y":0:100.5)``
          - a list of Axis objects, e.g. ``[Axis(...), Axis(...), ...]``
          - a list of axis tuples, e.g. ``[("X", 0, 100.5), (...), ...]``

      :raise: a :class:`WCPSClientException` in case ``axes`` is in invalid shape.



.. py:class:: Subset(op, axes)

   Bases: :py:obj:`WCPSExpr`


   Select a spatio-temporal area from a coverage operand.


.. py:class:: Extend(op, axes)

   Bases: :py:obj:`WCPSExpr`


   Enlarge a coverage with new areas set to null values.


.. py:class:: Scale(op)

   Bases: :py:obj:`WCPSExpr`


   Resamples the coverage values to fit a new domain. The target domain can be:

   1. An explicit grid domain for each axis with :meth:`to_explicit_grid_domain`: ::

           Scale(cov).to_explicit_grid_domain(
               [("X", 15, 30), ("Y", 20, 40)])

   2. A grid domain matching another coverage with :meth:`to_grid_domain_of`: ::

           Scale(cov).to_grid_domain_of(cov2)

   3. A scale factor equally applied to all axes with :meth:`by_factor`: ::

           Scale(cov).by_factor(0.5)

   3. A scale factor per axis with :meth:`by_factor_per_axis`: ::

           Scale(cov).by_factor_per_axis([0.5, 2])


   .. py:attribute:: axis_subsets
      :value: None



   .. py:attribute:: another_coverage
      :value: None



   .. py:attribute:: scale_factor
      :value: None



   .. py:attribute:: scale_factors
      :value: None



   .. py:method:: to_explicit_grid_domain(grid_axes)

      Scale to fit the grid domain specified by the ``grid_axes``.

      :param grid_axes: a list of :class:`Axis`



   .. py:method:: to_grid_domain_of(another_coverage)

      Scale to fit the grid domain of ``another_coverage``.

      :param another_coverage: a coverage expression



   .. py:method:: by_factor(scale_factor)

      :param scale_factor: factor > 1 for scaling up, 0 < factor < 1 for scaling down



   .. py:method:: by_factor_per_axis(scale_factors)

      :param scale_factors: a list of Axis(name, factor)



.. py:class:: ResampleAlg

   Bases: :py:obj:`StrEnum`


   Possible interpolation methods for :class:`Reproject`.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: NEAR
      :value: 'near'



   .. py:attribute:: BILINEAR
      :value: 'bilinear'



   .. py:attribute:: CUBIC
      :value: 'cubic'



   .. py:attribute:: CUBICSPLINE
      :value: 'cubicspline'



   .. py:attribute:: LANCZOS
      :value: 'lanczos'



   .. py:attribute:: AVERAGE
      :value: 'average'



   .. py:attribute:: MODE
      :value: 'mode'



   .. py:attribute:: MAX
      :value: 'max'



   .. py:attribute:: MIN
      :value: 'min'



   .. py:attribute:: MED
      :value: 'med'



   .. py:attribute:: Q1
      :value: 'q1'



   .. py:attribute:: Q3
      :value: 'q3'



   .. py:method:: list()
      :classmethod:


      :return: a list of the Enum values.



.. py:class:: Reproject(op, target_crs, interpolation_method = None)

   Bases: :py:obj:`WCPSExpr`


   Reproject a coverage to a different CRS.

   :param op: the coverage value to be reprojected.
   :param target_crs: the CRS to which ``op`` should be reprojected. It can be in one of these formats:

       - Full CRS URL, e.g. ``http://localhost:8080/rasdaman/def/crs/EPSG/0/4326`` (OGC standard format)
       - Shorthand CRS with authority, version and code, e.g. ``EPSG/0/4326``
       - Shorthand CRS with authority and code, e.g. ``EPSG:4326``

   :param interpolation_method: one of the :class:`ResampleAlg` constants,
       e.g. :const:`ResampleAlg.BILINEAR`.


   .. py:attribute:: target_crs
      :type:  str


   .. py:attribute:: interpolation_method
      :value: None



   .. py:attribute:: axis_resolutions
      :type:  Optional[list[Axis]]
      :value: None



   .. py:attribute:: axis_subsets
      :type:  Optional[list[Axis]]
      :value: None



   .. py:attribute:: subset_domain
      :type:  Optional[WCPSExpr]
      :value: None



   .. py:method:: to_axis_resolutions(axis_resolutions)

      The reprojected result will be resampled to these resolutions.

      :param axis_resolutions: a list of :class:`Axis` objects with only
          the axis name and low bound (corresponding to a resolution) specified.

      :raise: :class:`WCPSClientException` if an axis object has the :attr:`Axis.high` or :attr:`Axis.crs` set.

      Example: ::

          cov1 = Datacube("cov1")
          Reproject(cov1, "EPSG:4326", ResampleAlg.AVERAGE)
              .to_axis_resolutions([("X", 1.5), ("Y", 2)])



   .. py:method:: subset_by_axes(axis_subsets)

      The reprojected result will be cropped to the specified axis subsets.

      :param axis_subsets: a list of :class:`Axis` objects.

      :raise: :class:`WCPSClientException` if an axis object does not have the :attr:`Axis.high` set,
          or it has the :attr:`Axis.crs` set.

      Example: ::

          cov1 = Datacube("cov1")
          Reproject(cov1, "EPSG:4326")
              .subset_by_axes([("X", 1.5, 2.5), ("Y", 2, 4)])



   .. py:method:: subset_by_coverage_domain(subset_domain)

      The reprojected result will be cropped to the domain of a coverage expression ``subset_domain``.

      :param subset_domain: a coverage expression

      Example: ::

          cov1 = Datacube("cov1")
          cov2 = Datacube("cov2")
          Reproject(cov1, "EPSG:4326")
              .subset_by_coverage_domain(cov2)



.. py:class:: CastType

   Bases: :py:obj:`StrEnum`


   Possible cell types to which a value can be casted.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: BOOLEAN
      :value: 'boolean'



   .. py:attribute:: CHAR
      :value: 'char'



   .. py:attribute:: UNSIGNED_CHAR
      :value: 'unsigned char'



   .. py:attribute:: SHORT
      :value: 'short'



   .. py:attribute:: UNSIGNED_SHORT
      :value: 'unsigned short'



   .. py:attribute:: INT
      :value: 'int'



   .. py:attribute:: UNSIGNED_INT
      :value: 'unsigned int'



   .. py:attribute:: LONG
      :value: 'long'



   .. py:attribute:: UNSIGNED_LONG
      :value: 'unsigned long'



   .. py:attribute:: FLOAT
      :value: 'float'



   .. py:attribute:: DOUBLE
      :value: 'double'



   .. py:attribute:: CINT16
      :value: 'cint16'



   .. py:attribute:: CINT32
      :value: 'cint32'



   .. py:attribute:: COMPLEX
      :value: 'complex'



   .. py:attribute:: COMPLEX2
      :value: 'complex2'



   .. py:method:: list()
      :classmethod:


      :return: a list of the Enum values.



.. py:class:: Cast(op, target_type = None)

   Bases: :py:obj:`WCPSExpr`


   Cast a value to a new type. The type can be specified with the :meth:`to` method.

   :param op: the operand to be casted.
   :param target_type: must be one of the :class:`CastType` constants, e.g. :const:`CastType.CHAR`.

   Examples:

   - ``Cast(Datacube("test"), CastType.CHAR)``


   .. py:attribute:: target_type
      :value: None



   .. py:method:: to(target_type)

      Specify the type to which to cast this operand.
      :param target_type: must be one of the :class:`CastType` constants, e.g. :const:`CastType.CHAR`.



.. py:class:: Sum(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the sum of the cell values of the operand ``op``.

   Examples:

   - ``Sum(Datacube("test1"))``


.. py:class:: Count(op)

   Bases: :py:obj:`UnaryFunc`


   Counts the number of *true* values in the boolean operand ``op``.

   Examples:

   - ``Count(Datacube("test1") > 5)``


.. py:class:: Avg(op)

   Bases: :py:obj:`UnaryFunc`


   Computes the average (mean) of the cell values of the operand ``op``.

   Examples:

   - ``Avg(Datacube("test1"))``


.. py:class:: Min(op)

   Bases: :py:obj:`UnaryFunc`


   Returns the minimum value among the elements of the operand ``op``.

   Examples:

   - ``Min(Datacube("test1"))``


.. py:class:: Max(op)

   Bases: :py:obj:`UnaryFunc`


   Returns the maximum value among the elements of the operand ``op``.

   Examples:

   - ``Max(Datacube("test1"))``


.. py:class:: All(op)

   Bases: :py:obj:`UnaryFunc`


   Returns true if all elements in the operand ``op`` are true.

   Examples:

   - ``All(Datacube("test1"))``


.. py:class:: Some(op)

   Bases: :py:obj:`UnaryFunc`


   Returns true if some elements in the operand ``op`` are true.

   Examples:

   - ``Some(Datacube("test1"))``


.. py:class:: AxisIter(var_name, axis_name)

   Bases: :py:obj:`WCPSExpr`


   An axis iterator expression set in a :meth:`Condense.over` or a :meth:`Coverage.over` methods.
   The iteration can be over an integer grid :meth:`interval`, :meth:`of_grid_axis` domain
   of a particular coverage, or :meth:`of_of_geo_axis` domain of a coverage.

   The :meth:`ref` method should be used to get a reference to an :class:`AxisIter` that
   can be used in expressions for the :meth:`Condense.where`, :meth:`Condense.using`, or
   :meth:`Coverage.values` clauses.

   :param var_name: unique iterator variable name.
   :param axis_name: an axis over which it iterates.

   Examples:

   - ``AxisIter('$x', 'X').interval(0, 100)`` - iterate from 0 to 100, inclusive
   - ``AxisIter('$pt', 'time').of_grid_axis(Datacube("timeseries"))``
   - ``AxisIter('$plat', 'Lat').of_geo_axis(Datacube("cov"))``


   .. py:attribute:: var_name

      unique iterator variable name



   .. py:attribute:: axis_name

      an axis over which it iterates



   .. py:attribute:: low
      :value: None


      optional lower iteration bound



   .. py:attribute:: high
      :value: None


      optional upper iteration bound



   .. py:attribute:: grid_axis
      :value: None


      iterator over a grid axis domain of a coverage



   .. py:attribute:: geo_axis
      :value: None


      iterator over a geo axis domain of a coverage



   .. py:method:: interval(low, high)

      Iterate in the [low, high] interval.



   .. py:method:: of_grid_axis(cov_expr)

      Iterate over the grid axis domain of a coverage ``cov_expr``.



   .. py:method:: of_geo_axis(cov_expr)

      Iterate over the geo axis domain of a coverage ``cov_expr``.



   .. py:method:: ref()

      :return: a reference object that can be used in expressions set in the
          :meth:`Condense.where`, :meth:`Condense.using`, or :meth:`Coverage.values` methods.



.. py:class:: AxisIterRef(axis_iter)

   Bases: :py:obj:`WCPSExpr`


   Reference to an :class:`AxisIter` object, to be used in expressions set in the
       :meth:`Condense.where`, :meth:`Condense.using`, or :meth:`Coverage.values` methods.


   .. py:attribute:: iter_var


.. py:class:: CondenseOp

   Bases: :py:obj:`StrEnum`


   Possible general :class:`Condense` operators.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: PLUS
      :value: '+'



   .. py:attribute:: MULTIPLY
      :value: '*'



   .. py:attribute:: MIN
      :value: 'min'



   .. py:attribute:: MAX
      :value: 'max'



   .. py:attribute:: AND
      :value: 'and'



   .. py:attribute:: OR
      :value: 'or'



   .. py:attribute:: OVERLAY
      :value: 'overlay'



   .. py:method:: list()
      :classmethod:


      :return: a list of the Enum values.



.. py:class:: Condense(condense_op, over = None, using = None, where = None)

   Bases: :py:obj:`WCPSExpr`


   A general coverage condense (aggregation) operation. It aggregates values :meth:`over`
   an iteration domain formed of a list of :class:`AxisIter`, with a condenser operation
   (one of ``+``, ``*``, ``max``, ``min``, ``and``, or ``or``). For each coordinate in
   the iteration domain defined by the over clause, the :meth:`using` expression is
   evaluated and added to the final aggregated result; the optional :meth:`where` expression
   allows to filter values from the aggregation.

   It corresponds to a WCPS expression of the following form: ::

       condense op
       over $iterVar axis(lo:hi), ...
       [ where boolScalarExpr ]
       using scalarExpr

   Typically, the iterator variable iterates through a grid domain (:meth:`AxisIter.interval` or
   :meth:`AxisIter.of_grid_axis`). However, iteration over a geo domain is also supported
   with :meth:`AxisIter.of_geo_axis`.

   :param condense_op: one of the :class:`CondenseOp` constants, e.g. :const:`CondenseOp.PLUS`
   :param over: a list of axis iterators
   :param using: an expression that aggregates into the final value
   :param where: an optional expression to filter which expression values are evaluated

   For example, to sum the values of a coverage ``mycov`` (same as using the :class:`Sum` shorthand): ::

       cov = Datacube("mycov")
       pt_var = AxisIter('$pt', 'time').of_grid_axis(cov)
       pt_ref = pt_var.ref()
       Condense(CondenseOp.PLUS)
           .over(pt_var)
           .using(cov1[('time', pt_ref)])


   .. py:attribute:: condense_op

      One of the :class:`CondenseOp` constants, e.g. :const:`CondenseOp.PLUS`



   .. py:attribute:: iter_vars
      :value: []


      A list of :class:`AxisIter` forming the iteration domain for aggregation.



   .. py:attribute:: using_clause
      :value: None



   .. py:attribute:: where_clause
      :value: None



   .. py:method:: over(iter_var)

      Add an iterator variable to a `Condense` or a `Coverage` operand.
      Calling this method on another object type will raise a `WCPSClientException`.

      :param iter_var: an iterator variable
      :return: the same object with the iter_var appended to its iterator variables list

      Examples: ::

          cov = Datacube("testcube")
          pt_var = AxisIter('$pt', 'time').of_grid_axis(cov)
          px_var = AxisIter('$px', 'X').interval(0, 100)
          cov.condense(CondenseOp.PLUS).over(pt_var).over(px_var)



   .. py:method:: using(using)

      Specify an aggregation expression, evaluated for each point in the :meth:`over`
      domain and aggregated into the final result with the :attr:`condense_op`.



   .. py:method:: where(where)

      Specify a filtering expression, evaluated for each point in the :meth:`over`
      domain. If its result is false at that point then the :meth:`using` expression
      is not executed.



.. py:class:: Coverage(name, over = None, values_clause = None, value_list_clause = None)

   Bases: :py:obj:`WCPSExpr`


   A general coverage constructor operation. It allows to create a coverage :meth:`over` a
   spatio-temporal domain, where for each coordinate in the domain the value is
   dynamically calculated from a :meth:`values` expression which potentially references
   the iterator variables set in the :meth:`over` method. It corresponds to a WCPS
   expression of the following form: ::

       coverage covName
       over $iterVar axis(lo:hi), ...
       values scalarExpr

   Typically, the iterator variable iterates through a grid domain (:meth:`AxisIter.interval` or
   :meth:`AxisIter.of_grid_axis`). However, iteration over a geo domain is also supported
   with :meth:`AxisIter.of_geo_axis`.

   :param name: a name for the new coverage
   :param over: a list of axis iterators
   :param values_clause: an expression evaluating to a value for each point in the over domain;
       exclusive with ``value_list_clause``.
   :param value_list_clause: a list enumerating all cell values in the coverage domain;
       exclusive with ``values_clause``.

   For example, to create a 2D geo-referenced coverage with
   Lat and Lon axes, based on an existing geo-referenced coverage ``mycov``: ::

       cov = Datacube("mycov")
       plat_var = AxisIter('$pLat', 'Lat')
                       .of_geo_axis(cov['Lat', -30, -28.5])
       plon_var = AxisIter('$pLon', 'Lon')
                       .of_geo_axis(cov['Lon', 111.975, 113.475])
       Coverage("copy_of_mycov")
           .over(plat_var).over(plon_var)
           .values(cov1[('Lat', plat_var.ref()),
                        ('Lon', plon_var.ref())]))


   .. py:attribute:: name

      Name of the created coverage (datacube).



   .. py:attribute:: iter_vars
      :value: None


      A list of :class:`AxisIter` forming the created coverage domain.



   .. py:attribute:: values_clause
      :value: None


      An expression evaluated for each point in the coverage domain.



   .. py:attribute:: value_list_clause
      :value: None


      A list enumerating all cell values in the coverage domain.



   .. py:method:: over(iter_var)

      Add an iterator variable to the coverage constructor.

      :param iter_var: an iterator variable or a list of iterator variables
      :return: the same object with the ``iter_var`` appended to its iterator variables list

      Examples: ::

          cov = Datacube("testcube")
          pt_var = AxisIter('$pt', 'time').of_grid_axis(cov)
          px_var = AxisIter('$px', 'X').interval(0, 100)
          cov.condense(CondenseOp.PLUS).over(pt_var).over(px_var)



   .. py:method:: values(values_clause)

      Specify a VALUES expression, evaluated for each point in the :meth:`over` domain.



   .. py:method:: value_list(value_list_clause)

      Specify a VALUE LIST expression, enumerating all values in the :meth:`over` domain.



.. py:class:: Switch

   Bases: :py:obj:`WCPSExpr`


   Perform a switch operation for conditional evaluation. This produces a WCPS query
   fragment of the format: ::

       switch
       case boolCovExpr return covExpr
       case boolCovExpr return covExpr
       ...
       default return covExpr

   Use pairs of :meth:`case` and :meth:`then` method calls to specify
   case/return branches. Finally make a :meth:`default` method call to specify
   a default case executed when none of the case conditions are satisfied.

   Examples: ::

       cov1 = Datacube("cube1")
       cov2 = Datacube("cube2")
       Switch().case(cov1 > 5).then(cov2).default(cov1)


   .. py:attribute:: case_expr
      :type:  list[WCPSExpr]
      :value: []



   .. py:attribute:: then_expr
      :type:  list[WCPSExpr]
      :value: []



   .. py:attribute:: default_expr
      :value: None



   .. py:method:: case(case_expr)

      Specify a condition expression.
      :param case_expr: the boolean case expression.
      :raise: :class:`WCPSClientException` if there is a mismatch between the number of case/then expressions.



   .. py:method:: then(then_expr)

      Specify an expression to be evaluated when the previously set ``case`` expression is true.

      :param then_expr: the then expression.

      :raise: :class:`WCPSClientException` if there is a mismatch between
          the number of case/then expressions.



   .. py:method:: default(default_expr)

      Specify a default expressions executed when none of the case conditions are satisfied.

      :param default_expr: the default expression.

      :raise: :class:`WCPSClientException` if no case expressions have been specified,
          or if a default expression has already been set.



.. py:class:: Clip(op, wkt)

   Bases: :py:obj:`WCPSExpr`


   Clip ``op`` with the given WKT string. For supported WKT parameters see
   https://doc.rasdaman.org/05_geo-services-guide.html#polygon-raster-clipping

   Examples:

   .. code:: python

       c = Datacube("cov")
       Clip(c, "POLYGON((13589894.568 -2015496.69612, 15086830.0246 -1780682.3822))")

       Clip(c, 'LineString("2008-01-01T02:01:20.000Z" 75042.7273594 5094865.55794,
                           "2008-01-08T00:02:58.000Z" 705042.727359 5454865.55794)')

       Clip(c, "Multipolygon( ((-23.189600 118.432617, -27.458321 117.421875,
                                -30.020354 126.562500, -24.295789 125.244141)),
                              ((-27.380304 137.768555, -30.967012 147.700195,
                                -25.491629 151.259766, -18.050561 142.075195)) )")

       Clip(c, "CURTAIN(projection(Lat, Long),
                        Polygon((25 40, 30 40, 30 45, 30 42)) )")

       Clip(c, 'CORRIDOR(projection(E, N),
                         LineString("2008-01-01T02:01:20.000Z" 75042.7273594  5094865.55794,
                                    "2008-01-01T02:01:20.000Z" 75042.7273594 5194865.55794),
                         LineString(75042.7273594 5094865.55794, 75042.7273594 5094865.55794,
                                    85042.7273594 5194865.55794, 95042.7273594 5194865.55794) )')

       Clip(c, 'CORRIDOR(projection(Lat, Long),
                         LineString(26 41 "1950-01-01", 28 41 "1950-01-02"),
                         Polygon((25 40, 30 40, 30 45, 25 45)), discrete)')

   :param op: coverage expression to clip
   :param wkt: a WKT string describing the geometry for clipping


   .. py:attribute:: VALID_GEOMETRIES
      :value: ['LineString', 'Polygon', 'MultiLineString', 'MultiPolygon', 'Curtain', 'Corridor']



   .. py:attribute:: wkt
      :value: ''



.. py:class:: Udf(function_name, operands)

   Bases: :py:obj:`WCPSExpr`


   Execute a user-defined function (UDF), or any other WCPS function for which
   no concrete class exists yet.

   :param function_name: the UDF name, e.g. image.stretch
   :param operands: a list of operands that the UDF expects

   Examples: ::

       stretch = Udf('stretch', Datacube('cov1'))


   .. py:attribute:: function_name


.. py:class:: Encode(op, data_format = None, format_params = None)

   Bases: :py:obj:`WCPSExpr`


   Encode a coverage to some data format. The data format must be specified
   with the :meth:`to` method if it isn't provided here. Format parameters can
   be specified with the :meth:`params` method.

   :param op: the coverage expression to encode.
   :param data_format: the data format, e.g. "GTiff"
   :param format_params: additional format parameters the influence the encoding

   Examples:

   - ``Encode(Datacube("test")).to("GTiff")``
   - ``Encode(Datacube("test"), "GTiff")``
   - ``Encode(Datacube("test"), "GTiff", "...")``


   .. py:attribute:: data_format
      :value: None



   .. py:attribute:: format_params
      :value: None



   .. py:method:: to(data_format)

      Set the encoding data format.

      :param data_format: the data format, e.g. "GTiff"



   .. py:method:: params(format_params)

      Set the encoding format parameters.

      :param format_params: additional format parameters the influence the encoding



.. py:exception:: WCPSClientException

   Bases: :py:obj:`Exception`


   An exception thrown by this library.

   Initialize self.  See help(type(self)) for accurate signature.


