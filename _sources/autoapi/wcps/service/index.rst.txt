wcps.service
============

.. py:module:: wcps.service

.. autoapi-nested-parse::

   Execute a WCPS query on a WCPS server, and save/return the result.



Attributes
----------

.. autoapisummary::

   wcps.service.DEFAULT_CONN_TIMEOUT
   wcps.service.DEFAULT_READ_TIMEOUT


Classes
-------

.. autoapisummary::

   wcps.service.WCPSResultType
   wcps.service.WCPSResult
   wcps.service.Service


Module Contents
---------------

.. py:data:: DEFAULT_CONN_TIMEOUT
   :value: 10


   Default timeout to establish a connection to the WCPS service: 10 seconds.


.. py:data:: DEFAULT_READ_TIMEOUT
   :value: 600


   Default timeout to wait for a query to execute: 10 minutes.


.. py:class:: WCPSResultType

   Bases: :py:obj:`wcps.model.StrEnum`


   A list of possible WCPS result types.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: SCALAR
      :value: 'scalar'


      A scalar value such as 1, 1.55, etc.



   .. py:attribute:: MULTIBAND_SCALAR
      :value: 'multiband_scalar'


      A multiband scalar value is a list of multiple numbers, e.g. [1, 2, 3]



   .. py:attribute:: JSON
      :value: 'json'


      A JSON list



   .. py:attribute:: IMAGE
      :value: 'image'


      An array encoded to an image data format such as TIFF or PNG.



   .. py:attribute:: NETCDF
      :value: 'netcdf'


      An array encoded to NetCDF.



   .. py:attribute:: NUMPY
      :value: 'numpy'


      A numpy array.



   .. py:attribute:: ARRAY
      :value: 'array'


      Generic array type, unknown data format.



.. py:class:: WCPSResult

   Encapsulates a result from executing a WCPS query.


   .. py:attribute:: value
      :type:  any

      The result value: a scalar or list of scalars, a JSON list, or an array (encoded or numpy).



   .. py:attribute:: type
      :type:  WCPSResultType

      The result type.



.. py:class:: Service(endpoint, username=None, password=None)

   Establish a connection to a WCPS service, send queries and retrieve results.

   :param endpoint: the WCPS server endpoint URL, e.g. https://ows.rasdaman.org/rasdaman/ows
   :param username: optional username for basic authentication to the WCPS server
   :param password: optional password for basic authentication to the WCPS server

   Example usage: ::

       service = Service("https://ows.rasdaman.org/rasdaman/ows")
       query = Datacube("NIR").encode("PNG")

       # save the response to a file output.png
       service.query(query, output_file='output.png')
       # or get the response object back
       response = service.query(query)


   .. py:attribute:: endpoint


   .. py:attribute:: endpoint_wcps


   .. py:attribute:: auth
      :value: None



   .. py:method:: execute(wcps_query, convert_to_numpy = False, conn_timeout = DEFAULT_CONN_TIMEOUT, read_timeout = DEFAULT_READ_TIMEOUT)

      Sends a WCPS query to the service. Depending on the result, it returns:

      - A single number (int or float) if the result was a single scalar value
      - A list of numbers (int or float) if the result was a multiband scalar value
      - A JSON array object if the result was a JSON array (the query did encode to "JSON")
      - A string if the result was a CSV array (the query did encode to "CSV")
      - A bytes object if the result was a binary data format, such as TIFF, netCDF, PNG.

      :param wcps_query: the WCPS query to be executed on the server.
      :param convert_to_numpy: if True an *array* result encoded to a data format
          will be automatically converted to a numpy array.
      :param conn_timeout: how long (seconds) to wait for the connection to be established
      :param read_timeout: how long (seconds) to wait for the query to execute
      :return: the response object from evaluating the query.

      :raise: :exc:`wcps.model.WCPSClientException` if the server returns an error status code.



   .. py:method:: download(wcps_query, output_file, conn_timeout = DEFAULT_CONN_TIMEOUT, read_timeout = DEFAULT_READ_TIMEOUT)

      Sends a WCPS query to the service and save the response into an ``output_file``.

      :param wcps_query: the WCPS query to be executed on the server.
      :param output_file: a path where the response will be written to.
      :param conn_timeout: how long (seconds) to wait for the connection to be established
      :param read_timeout: how long (seconds) to wait for the query to execute
      :return: the response object from evaluating the query.

      :raise: :exc:`wcps.model.WCPSClientException` if the server returns an error status code.



   .. py:method:: show(query_or_result, conn_timeout = DEFAULT_CONN_TIMEOUT, read_timeout = DEFAULT_READ_TIMEOUT)

      Displays the evaluation result of a WCPS query.

      - 2D image results are shown with :meth:`PIL.Image.Image.show`.
      - scalar, JSON, and numpy array results are printed to stdout
      - netCDF results print the Dataset information to stdout

      :param query_or_result: If a WCPS query in string or as a
          :class:`wcps.model.WCPSExpr` object is provided, then it will be executed first with
          the :meth:`execute` method, and the returned result will be accordingly displayed.
          If instead a :class:`WCPSResult` object is provided, it will be just displayed.

      :param conn_timeout: how long (seconds) to wait for the connection to be established
      :param read_timeout: how long (seconds) to wait for the query to execute

      :raise: :exc:`wcps.model.WCPSClientException` if the server returns an error status code,
          or the result cannot be handled.



   .. py:method:: execute_raw(wcps_query, conn_timeout = DEFAULT_CONN_TIMEOUT, read_timeout = DEFAULT_READ_TIMEOUT, stream = False)

      Sends a WCPS query to the service and return the raw :class:`requests.Response` object.

      The :meth:`execute` and :meth:`download` are more user-friendly methods that return
      the response properly interpreted or download to a file.

      :param wcps_query: the WCPS query to be executed on the server.
      :param conn_timeout: how long (seconds) to wait for the connection to be established
      :param read_timeout: how long (seconds) to wait for the query to execute
      :param stream: allow streaming the query result so it can be downloaded in chunks

      :return: the response object from evaluating the query.

      :raise: :exc:`wcps.model.WCPSClientException` if the server returns an error status code.



   .. py:method:: response_to_wcps_result(response, convert_to_numpy = False)

      Converts a :class:`requests.Response` into a :class:`WCPSResult`.

      :param response: the response to be converted.
      :param convert_to_numpy: if True an *array* result encoded to a data format
          will be automatically converted to a numpy array.
      :return: a :class:`WCPSResult` with the :attr:`WCPSResult.type` set to the
          response type, and the :attr:`WCPSResult.value` set to the response value.



